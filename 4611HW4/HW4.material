material HW4/Test
{
	technique
	{
		pass
		{
			ambient 0.1 0.1 0.1

			texture_unit
			{
				texture BeachStones.jpg
			}
		}
	}
}

material HW4/Dirt
{
	technique
	{
		pass
		{
			ambient 0.1 0.1 0.1

			texture_unit
			{
				texture Dirt.jpg
			}
		}
	}
}


material HW4/Brass
{
	technique
	{
		pass
		{
			texture_unit
			{
				texture RustySteel.jpg
			}

			texture_unit
			{
				texture spheremap.png
				colour_op_ex add src_texture src_current
				colour_op_multipass_fallback one one
				env_map spherical
			}
		}
	}
}

material HW4/Chrome
{
	technique
	{
		pass
		{
			ambient 0.25 0.25 0.25 1
			diffuse 0.4 0.4 0.4 1
			specular 0.77 0.77 0.77 1 76.5
			texture_unit
			{
				texture Chrome.jpg				
			}

			texture_unit
			{
				texture spheremap.png
				colour_op_ex add src_texture src_current
				colour_op_multipass_fallback one one
				env_map spherical
			}
		}
	}
}

material HW4/Yellow
{
	technique
	{
		pass
		{
			ambient 0.5 0.5 0.5 1
			diffuse 0.8 0.68 0 1
			specular 1 1 1 1 60.5

			texture_unit
			{
				colour_op_ex blend_manual src_current src_texture 0.85
				cubic_texture cubescene.jpg combinedUVW
				tex_address_mode clamp
				env_map cubic_reflection
			}
		}
	}
}

material HW4/White
{
	technique
	{
		pass
		{
			ambient 0.05 0.05 0.05 1
			diffuse 0.5 0.5 0.5 1
			specular 0.7 0.7 0.7 1 10

			texture_unit
			{
				colour_op_ex blend_manual src_current src_texture 0.85
				cubic_texture cubescene.jpg combinedUVW
				tex_address_mode clamp
				env_map cubic_reflection
			}
		}
	}
}

vertex_program CSCI4611/BumpMapVert glsl
{
	source BumpMapVert.glsl
	profiles glsl
}

fragment_program CSCI4611/BumpMapFrag glsl
{
	source BumpMapFrag.glsl
	profiles glsl
	default_params
	{
		// assign samplers as required by GLSL
		param_named normalMap int 0
	}
}

// Any number of lights, diffuse
material CSCI4611/BumpMapSimple
{
	// This is the preferred technique which uses both vertex and
	// fragment programs, supports coloured lights
	technique
	{
		// Base ambient pass
		pass ambient
		{
            // Fix for flickering
            depth_write on
            depth_bias 0

			// Disable fog (it won't look right)
			fog_override true
        
			ambient ambient_light_colour
			diffuse 0 0 0 
			specular 0 0 0 0
		}

		// Now do the lighting pass
		// NB we don't do decal texture here because this is repeated per light
		pass perlight
		{
            // Fix for flickering
            depth_write on
            depth_bias 2	// May need to be tweaked based on the relative scale of the geometry
        
			// base colours, not needed for rendering, but as information
			// to lighting pass categorisation routine
			ambient 0 0 0 
			
			// do this for each light
			iteration once_per_light

			scene_blend add

			// Vertex program reference
			vertex_program_ref CSCI4611/BumpMapVert
			{
				param_named_auto lightPosition light_position_object_space 0
				param_named_auto worldViewProj worldviewproj_matrix
			}

			// Fragment program
			fragment_program_ref CSCI4611/BumpMapFrag
			{
				param_named_auto lightDiffuse light_diffuse_colour 0 
			}
			
			// Base bump map
			texture_unit normalmap
			{
				texture NMBumpsOut.png
				colour_op replace
			}
		}
		
		// Decal pass
		pass decal
		{
            // Fix for flickering
            depth_write on
            depth_bias 4	// May need to be tweaked based on the relative scale of the geometry
        
			// Disable lighting and fog (fog won't look right)
			lighting off
			fog_override true

			scene_blend modulate
			texture_unit decalmap
			{
				texture RustedMetal.jpg 
				color_op modulate
			}
		}
	}
}
